<Project>
    <PropertyGroup>
        <!-- Bazel variables -->
        <BazelWorkspaceName Condition="$(BazelWorkspaceName) == ''">@@workspace_name@@</BazelWorkspaceName>
        <BazelWorkspacePath Condition="$(BazelWorkspacePath) == ''">$(MSBuildThisFileDirectory)@@workspace_path@@</BazelWorkspacePath>
        <BazelBin Condition="$(UseBazel) != 'true'">dotnet-bin</BazelBin>
        <BazelBin Condition="$(BazelBin) == ''">@@bazel_bin@@</BazelBin>
        <BazelNuGetWorkspace Condition="$(BazelNuGetWorkspace) == ''">@@nuget_workspace_name@@</BazelNuGetWorkspace>
        <BazelExecRoot>$(BazelWorkspacePath)bazel-$(BazelWorkspaceName)</BazelExecRoot>

        <BazelPackage>$([MSBuild]::MakeRelative($(BazelWorkspacePath), $(MSBuildProjectDirectory)).Replace('\','/'))</BazelPackage>
        <!-- If the file is at the root, msbuild will generate a relative path to this directory, bazel wants this to be empty -->
        <BazelPackage Condition="$(BazelPackage.StartsWith(../))"></BazelPackage>
        <BazelExternal>$(BazelExecRoot)/external</BazelExternal>
    </PropertyGroup>

    <PropertyGroup  Condition="$(BazelBuild) == ''">
        <!-- Override MSBuild properties, these settings help IDEs find output files. -->
        <!--
            If UseBazel is not 'true' these will instruct msbuild to construct a similar output tree, but under
            dotnet-bin instead of bazel-bin.
         -->
        <OutputPath>$(BazelWorkspacePath)$(BazelBin)/</OutputPath>
        <OutputPath Condition="$(BazelPackage) != ''">$(OutputPath)/$(BazelPackage)/</OutputPath>
        <BaseIntermediateOutputPath>$(OutputPath)obj</BaseIntermediateOutputPath>
        <IntermediateOutputPath>$(BaseIntermediateOutputPath)</IntermediateOutputPath>
        <BuildProjectReferences Condition="$(UseBazel) == 'true'">false</BuildProjectReferences>
    </PropertyGroup>
</Project>